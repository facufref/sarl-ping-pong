/** 
 * 
 */
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.core.DefaultContextInteractions

/** 
 * @author citat01
 * 
 */
agent MyAgent {
	uses Lifecycle

	on Initialize {
		spawn(PongAgent)
		spawn(PingAgent)
		killMe
	}
}

agent PongAgent {
	uses DefaultContextInteractions

	on Ping {
		var indexReceived = occurrence.index
		
		if (indexReceived < 100){
		println("Ping " + indexReceived)
		emit(new Pong(indexReceived + 1))
			[it == occurrence.source]
			
			}
	}
}

agent PingAgent {
	uses DefaultContextInteractions, Schedules

	on Pong {
		var indexReceived = occurrence.index
		
		println("Pong " + indexReceived)
		emit(new Ping(indexReceived + 1))
			[it == occurrence.source]
	}

	on Initialize {
		val task = task("waiting_for_partner")
        task.every(1000) [
			if (defaultSpace.participants.size > 1) {
				emit(new Ping(0))
				task.cancel
			}
		]
	}
}

event Ping {
	var index : int

	new (i : int) {
		index = i
	}
}

event Pong {
	val index : int

	new(i : int) {
		this.index = i
	}
}
